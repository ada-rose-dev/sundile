'''
watch-headers.py
This script watches the current Systems and Components header files and recompiles All-Components.h and All-Systems.h on change.
'''

#-- Includes
from os import listdir
from os.path import isfile, join
from time import sleep

#-- Define Functions
def readFiles(path):
    directory = listdir(path) #not working?

    filenames = [f for f in listdir(path) if (isfile(join(path, f)) and f.endswith(".h"))]
    files = dict()
    for filename in filenames:
        file = open(path+filename)
        files[filename] = file;
    return files

def write(files, item):
    print("Writing to", item["writepath"])
    
    fobj = open(item["writepath"], 'w')
    fobj.writelines([
        "//-- (automatically generated by watch-headers.py)\n\n"
    ])
    for filename in files:
        fobj.write("#include \""+item["includepath"]+filename+"\"\n")

    if item["inits"]:
        fobj.write("namespace Systems {\n")
        fobj.write("\tvoid init(SimSystem _sim) {\n")
        for filename in files:
            fobj.write("\t\t"+filename[:-2]+"::init(_sim);\n")
        fobj.write("\t}\n}")


def mainloop(items):

    for itemname, itemval in items.items():
        srcpath = itemval["srcpath"]

        files = readFiles(srcpath)

        if files != files_prev:
            do_write = False

            # compare filename lists -- TODO
            shared_items = {k: files[k] for k in files if k in files_prev[itemname] and files[k] == files_prev[itemname][k]}

            if (len(shared_items) != len(list(files))):
                do_write = True

            # compare file contents
            if not do_write:
                for key, value in files_prev:
                    if value != files[key]:
                        do_write = True

            if do_write:
                write(files,itemval)

        files_prev[itemname] = files

#-- Main Loop
run = True
sleeptime = 0.5

items = {
    "components": {
        "srcpath": './src/components/',
        "writepath": srcpath+'AllComponents.h',
        "includepath": './',
        "inits": False
    },
    "systems": {
        "srcpath": './src/systems/',
        "writepath": srcpath+'AllSystems.h',
        "includepath": './',
        "inits": True
    }
}

files_prev = {
    'components': readFiles(items["components"]["srcpath"]),
    'systems': readFiles(items["systems"]["srcpath"])
}

write(files_prev["components"], items["components"])
write(files_prev["systems"], items["systems"])

while (run):
  
    mainloop(items)

    sleep(sleeptime)